
auto begin() { return data.begin(); }
auto begin() const { return data.begin(); }
auto end() { return data.end(); }
auto end() const { return data.end(); }

T& operator[](size_t i) { return data[i]; }
const T& operator[](size_t i) const { return data[i]; }

inline simd to_simd() const { return {data.data(), stdmath::vector_aligned}; }
inline void from_simd(const simd& simd) { simd.copy_to(data.data(), stdmath::vector_aligned); }
inline static self make_from_simd(const simd& simd) { self out; out.from_simd(simd); return out; }



inline friend self add(const self& a, const self& b) {
	return make_from_simd(a.to_simd() + b.to_simd());
}
inline friend self operator+(const self& a, const self& b) { return add(a, b); }

inline friend self subtract(const self& a, const self& b) {
	return make_from_simd(a.to_simd() - b.to_simd());
}
inline friend self operator-(const self& a, const self& b) { return subtract(a, b); }

inline self negate() const
requires(requires(T t) { { -t } -> std::convertible_to<T>; })
{
	return make_from_simd(-this->to_simd());
}
inline friend self operator-(const self& a)
requires(requires(T t) { { -t } -> std::convertible_to<T>; })
{
	return negate(a);
}

inline friend self multiply(const self& a, const self& b) {
	return make_from_simd(a.to_simd() * b.to_simd());
}
inline friend self operator*(const self& a, const self& b) { return multiply(a, b); }
template<std::convertible_to<T> Tlike>
inline friend self multiply(const self& a, const Tlike& b) {
	return make_from_simd(a.to_simd() * vec<T, N>(b).to_simd());
}
template<std::convertible_to<T> Tlike>
inline friend self operator*(const self& a, const Tlike& b) { return multiply(a, b); }

inline friend self divide(const self& a, const self& b) {
	return make_from_simd(a.to_simd() / b.to_simd());
}
inline friend self operator/(const self& a, const self& b) { return divide(a, b); }
template<std::convertible_to<T> Tlike>
inline friend self divide(const self& a, const Tlike& b) {
	return make_from_simd(a.to_simd() / vec<T, N>(b).to_simd());
}
template<std::convertible_to<T> Tlike>
inline friend self operator/(const self& a, const Tlike& b) { return divide(a, b); }

inline friend self modulus(const self& a, const self& b)
requires(requires(T t) { { t % t } -> std::convertible_to<T>; })
{
	return make_from_simd(a.to_simd() % b.to_simd());
}
inline friend self modulus(const self& a, const self& b)
requires(requires(T t) { { t % t } -> std::convertible_to<T>; })
{ return modulus(a, b); }
template<std::convertible_to<T> Tlike>
inline friend self modulus(const self& a, const Tlike& b)
requires(requires(T t) { { t % t } -> std::convertible_to<T>; })
{
	return make_from_simd(a.to_simd() % vec<T, N>(b).to_simd());
}
template<std::convertible_to<T> Tlike>
inline friend self modulus(const self& a, const Tlike& b)
requires(requires(T t) { { t % t } -> std::convertible_to<T>; })
{ return modulus(a, b); }



inline friend self operator!(const self& a)
requires(requires(T t) { { !t } -> std::convertible_to<T>; })
{
	return make_from_simd(!a.to_simd());
}

inline friend self operator~(const self& a)
requires(requires(T t) { { ~t } -> std::convertible_to<T>; })
{
	return make_from_simd(~a.to_simd());
}

inline friend self operator&&(const self& a, const self& b)
requires(requires(T t) { { t && t } -> std::convertible_to<T>; })
{
	return make_from_simd(a.to_simd() && b.to_simd());
}

inline friend self operator&(const self& a, const self& b)
requires(requires(T t) { { t & t } -> std::convertible_to<T>; })
{
	return make_from_simd(a.to_simd() & b.to_simd());
}

inline friend self operator||(const self& a, const self& b)
requires(requires(T t) { { t || t } -> std::convertible_to<T>; })
{
	return make_from_simd(a.to_simd() || b.to_simd());
}

inline friend self operator|(const self& a, const self& b)
requires(requires(T t) { { t | t } -> std::convertible_to<T>; })
{
	return make_from_simd(a.to_simd() | b.to_simd());
}

inline friend self operator^(const self& a, const self& b)
requires(requires(T t) { { t ^ t } -> std::convertible_to<T>; })
{
	return make_from_simd(a.to_simd() ^ b.to_simd());
}



inline friend vec<bool, N> operator==(const self& a, const self& b) {
	return vec<bool, N>::make_from_simd(a.to_simd() == b.to_simd());
}
inline friend vec<bool, N> operator!=(const self& a, const self& b) {
	return vec<bool, N>::make_from_simd(a.to_simd() != b.to_simd());
}

inline friend vec<bool, N> operator<(const self& a, const self& b) {
	return vec<bool, N>::make_from_simd(a.to_simd() < b.to_simd());
}
inline friend vec<bool, N> operator<=(const self& a, const self& b) {
	return vec<bool, N>::make_from_simd(a.to_simd() <= b.to_simd());
}
inline friend vec<bool, N> operator>(const self& a, const self& b) {
	return vec<bool, N>::make_from_simd(a.to_simd() > b.to_simd());
}
inline friend vec<bool, N> operator>=(const self& a, const self& b) {
	return vec<bool, N>::make_from_simd(a.to_simd() >= b.to_simd());
}

inline friend vec<bool, N> operator!(const self& v) {
	return vec<bool, N>::make_from_simd(!v.to_simd());
}



inline operator bool() {
	return all_of(*this);
}


inline friend self min(const self& a, const self& b)
requires(requires(T t) { { t < t } -> std::convertible_to<T>; })
{
	return make_from_simd(min(a.to_simd(), b.to_simd()));
}

inline friend self max(const self& a, const self& b)
requires(requires(T t) { { t < t } -> std::convertible_to<T>; })
{
	return make_from_simd(max(a.to_simd(), b.to_simd()));
}

inline T length_squared() const {
	return reduce(to_simd() * to_simd());
}

inline T length() const {
	return sqrt(length_squared());
}

inline friend T dot(const self& a, const self& b) {
	return reduce(a.to_simd() * b.to_simd());
}



inline T min()
requires(requires(T t) { { t < t } -> std::convertible_to<T>; })
{
	return hmin(to_simd());
}

inline self max()
requires(requires(T t) { { t < t } -> std::convertible_to<T>; })
{
	return hmax(to_simd());
}

template<typename Tfunction> // TODO: Do we want this function to be able to change the type of the vector? vec<int, 4> -> vec<floats, 4> // Probably not?
inline T elementwise_transform(const Tfunction& function) {
	T out = *this;
	for(auto& element: out)
		out = function(out);
	return out;
}