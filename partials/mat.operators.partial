
auto begin() { return data.begin(); }
auto end() { return data.end(); }

inline simd to_simd() const { return {data.data(), stdmath::vector_aligned}; }
inline void from_simd(const simd& simd) { simd.copy_to(data.data(), stdmath::vector_aligned); }
inline static self make_from_simd(const simd& simd) { self out; out.from_simd(simd); return out; }



inline friend self operator+(const self& a, const self& b) {
	return make_from_simd(a.to_simd() + b.to_simd());
}

inline friend self operator-(const self& a, const self& b) {
	return make_from_simd(a.to_simd() - b.to_simd());
}

inline friend self operator-(const self& a)
requires(requires(T t) { { -t } -> std::convertible_to<T>; })
{
	return make_from_simd(-a.to_simd());
}

//inline friend self operator*(const self& a, const self& b) {
//	return make_from_simd(a.to_simd() * b.to_simd());
//}

inline friend self operator/(const self& a, const self& b) {
	return make_from_simd(a.to_simd() / b.to_simd());
}

inline friend self operator%(const self& a, const self& b) 
requires(requires(T t) { { t % t } -> std::convertible_to<T>; })
{
	return make_from_simd(a.to_simd() % b.to_simd());
}
